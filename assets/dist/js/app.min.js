/**
 * Core JavaScript - Bologna Marathon
 * Sistema modulare JavaScript
 */

class BolognaMarathonApp {
    constructor() {
        this.init();
    }
    
    init() {
        this.setupMenu();
        this.setupModules();
        this.setupScrollEffects();
    }
    
    /**
     * Setup menu mobile
     */
    setupMenu() {
        const menuToggle = document.getElementById('menu-toggle');
        const menuNav = document.getElementById('menu-nav');
        
        if (menuToggle && menuNav) {
            menuToggle.addEventListener('click', () => {
                menuNav.classList.toggle('active');
                menuToggle.classList.toggle('active');
            });
            
            // Chiudi menu al click su link
            const menuLinks = menuNav.querySelectorAll('.menu-link');
            menuLinks.forEach(link => {
                link.addEventListener('click', () => {
                    menuNav.classList.remove('active');
                    menuToggle.classList.remove('active');
                });
            });
            
            // Chiudi menu al click fuori
            document.addEventListener('click', (e) => {
                if (!menuToggle.contains(e.target) && !menuNav.contains(e.target)) {
                    menuNav.classList.remove('active');
                    menuToggle.classList.remove('active');
                }
            });
        }
    }
    
    /**
     * Setup moduli dinamici
     */
    setupModules() {
        // Inizializza tutti i moduli presenti
        const modules = document.querySelectorAll('[data-module]');
        modules.forEach(module => {
            const moduleName = module.getAttribute('data-module');
            this.initModule(moduleName, module);
        });
    }
    
    /**
     * Inizializza un modulo specifico
     */
    initModule(moduleName, element) {
        switch (moduleName) {
            case 'actionHero':
                this.initHeroModule(element);
                break;
            case 'resultsTable':
                this.initResultsModule(element);
                break;
            case 'gallery':
                this.initGalleryModule(element);
                break;
            default:
                console.log(`Modulo ${moduleName} non ha JavaScript specifico`);
        }
    }
    
    /**
     * Inizializza modulo Hero
     */
    initHeroModule(element) {
        // Parallax effect per background
        const heroBg = element.querySelector('.hero-bg');
        if (heroBg) {
            window.addEventListener('scroll', () => {
                const scrolled = window.pageYOffset;
                const rate = scrolled * -0.5;
                heroBg.style.transform = `translateY(${rate}px)`;
            });
        }
        
        // Smooth scroll per link interni
        const heroLinks = element.querySelectorAll('a[href^="#"]');
        heroLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const targetId = link.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);
                if (targetElement) {
                    targetElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    }
    
    /**
     * Inizializza modulo Results
     */
    initResultsModule(element) {
        // Funzionalità già implementate nel modulo PHP
        console.log('Modulo Results inizializzato');
    }
    
    /**
     * Inizializza modulo Gallery
     */
    initGalleryModule(element) {
        // Lightbox per immagini
        const images = element.querySelectorAll('img[data-lightbox]');
        images.forEach(img => {
            img.addEventListener('click', () => {
                this.openLightbox(img.src, img.alt);
            });
        });
    }
    
    /**
     * Apre lightbox
     */
    openLightbox(src, alt) {
        const lightbox = document.createElement('div');
        lightbox.className = 'lightbox';
        lightbox.innerHTML = `
            <div class="lightbox-content">
                <img src="${src}" alt="${alt}">
                <button class="lightbox-close">&times;</button>
            </div>
        `;
        
        document.body.appendChild(lightbox);
        
        // Chiudi lightbox
        const closeBtn = lightbox.querySelector('.lightbox-close');
        closeBtn.addEventListener('click', () => {
            document.body.removeChild(lightbox);
        });
        
        lightbox.addEventListener('click', (e) => {
            if (e.target === lightbox) {
                document.body.removeChild(lightbox);
            }
        });
        
        // ESC per chiudere
        document.addEventListener('keydown', function escHandler(e) {
            if (e.key === 'Escape') {
                document.body.removeChild(lightbox);
                document.removeEventListener('keydown', escHandler);
            }
        });
    }
    
    /**
     * Setup effetti scroll
     */
    setupScrollEffects() {
        // Intersection Observer per animazioni
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                }
            });
        }, observerOptions);
        
        // Osserva elementi animabili
        const animateElements = document.querySelectorAll('.hero-module, .results-table, .module-wrapper');
        animateElements.forEach(el => {
            observer.observe(el);
        });
    }
}

// Utility functions
const Utils = {
    /**
     * Debounce function
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },
    
    /**
     * Throttle function
     */
    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    },
    
    /**
     * Format time
     */
    formatTime(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        
        if (hours > 0) {
            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }
        return `${minutes}:${secs.toString().padStart(2, '0')}`;
    }
};

// Inizializza app quando DOM è pronto
document.addEventListener('DOMContentLoaded', () => {
    window.bolognaMarathon = new BolognaMarathonApp();
});

// CSS per lightbox
const lightboxCSS = `
<style>
.lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: var(--z-modal, 1050);
    animation: fadeIn 0.3s ease;
}

.lightbox-content {
    position: relative;
    max-width: 90%;
    max-height: 90%;
}

.lightbox img {
    max-width: 100%;
    max-height: 100%;
    border-radius: var(--border-radius-lg);
}

.lightbox-close {
    position: absolute;
    top: -40px;
    right: 0;
    background: var(--white);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 24px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-fast);
}

.lightbox-close:hover {
    background: var(--primary-color);
    color: var(--white);
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.animate-in {
    animation: slideInUp 0.6s ease forwards;
}

@keyframes slideInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}
</style>
`;

// Aggiungi CSS lightbox al documento
document.head.insertAdjacentHTML('beforeend', lightboxCSS);

/**
 * Button Module JavaScript
 * Funzionalità interattive per pulsanti
 */

document.addEventListener('DOMContentLoaded', function() {
    // Gestione pulsanti con loading
    const buttons = document.querySelectorAll('.btn');
    
    buttons.forEach(button => {
        // Click handler per pulsanti con data-loading
        if (button.hasAttribute('data-loading')) {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Aggiungi stato loading
                this.classList.add('btn-loading');
                this.setAttribute('disabled', 'true');
                
                // Simula operazione asincrona
                const loadingDuration = parseInt(this.getAttribute('data-loading')) || 2000;
                
                setTimeout(() => {
                    this.classList.remove('btn-loading');
                    this.removeAttribute('disabled');
                }, loadingDuration);
            });
        }
        
        // Gestione click per pulsanti con bounce effect
        if (button.hasAttribute('data-bounce')) {
            button.addEventListener('click', function() {
                this.classList.add('btn-bounce');
                
                setTimeout(() => {
                    this.classList.remove('btn-bounce');
                }, 600);
            });
        }
        
        // Gestione hover per pulsanti con pulse
        if (button.hasAttribute('data-pulse')) {
            button.addEventListener('mouseenter', function() {
                this.classList.add('btn-pulse');
            });
            
            button.addEventListener('mouseleave', function() {
                this.classList.remove('btn-pulse');
            });
        }
    });
    
    // Gestione form submission con loading
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        const submitButton = form.querySelector('.btn[type="submit"]');
        if (submitButton) {
            form.addEventListener('submit', function() {
                submitButton.classList.add('btn-loading');
                submitButton.setAttribute('disabled', 'true');
            });
        }
    });
    
    // Gestione link esterni con icona
    const externalLinks = document.querySelectorAll('a[href^="http"]:not([href*="' + window.location.hostname + '"])');
    externalLinks.forEach(link => {
        if (!link.querySelector('.fa-external-link-alt')) {
            const icon = document.createElement('i');
            icon.className = 'fas fa-external-link-alt';
            icon.style.marginLeft = '4px';
            link.appendChild(icon);
        }
    });
});

// Utility functions per gestione pulsanti programmatica
window.ButtonUtils = {
    /**
     * Setta stato loading a un pulsante
     */
    setLoading: function(button, loading = true) {
        if (loading) {
            button.classList.add('btn-loading');
            button.setAttribute('disabled', 'true');
        } else {
            button.classList.remove('btn-loading');
            button.removeAttribute('disabled');
        }
    },
    
    /**
     * Cambia variante di un pulsante
     */
    changeVariant: function(button, variant) {
        // Rimuovi tutte le varianti
        const variants = ['primary', 'secondary', 'marathon', 'portici', 'runtune', 'ghost', 'outline'];
        variants.forEach(v => button.classList.remove(`btn-${v}`));
        
        // Aggiungi nuova variante
        button.classList.add(`btn-${variant}`);
    },
    
    /**
     * Cambia dimensione di un pulsante
     */
    changeSize: function(button, size) {
        // Rimuovi tutte le dimensioni
        const sizes = ['small', 'medium', 'large', 'xl'];
        sizes.forEach(s => button.classList.remove(`btn-${s}`));
        
        // Aggiungi nuova dimensione
        button.classList.add(`btn-${size}`);
    },
    
    /**
     * Animazione bounce
     */
    bounce: function(button) {
        button.classList.add('btn-bounce');
        setTimeout(() => {
            button.classList.remove('btn-bounce');
        }, 600);
    }
};

/**
 * Hero Module JavaScript
 * Logica per il modulo hero
 */

class HeroModule {
    constructor() {
        this.init();
    }
    
    init() {
        this.setupParallax();
        this.setupAnimations();
    }
    
    setupParallax() {
        const heroBg = document.querySelector('.hero-bg');
        if (!heroBg) return;
        
        window.addEventListener('scroll', () => {
            const scrolled = window.pageYOffset;
            const rate = scrolled * -0.5;
            heroBg.style.transform = `translateY(${rate}px)`;
        });
    }
    
    setupAnimations() {
        const heroTitle = document.querySelector('.hero-title');
        const heroSubtitle = document.querySelector('.hero-subtitle');
        const heroDescription = document.querySelector('.hero-description');
        
        if (heroTitle) {
            this.animateText(heroTitle, 0);
        }
        
        if (heroSubtitle) {
            this.animateText(heroSubtitle, 200);
        }
        
        if (heroDescription) {
            this.animateText(heroDescription, 400);
        }
    }
    
    animateText(element, delay) {
        setTimeout(() => {
            element.style.opacity = '0';
            element.style.transform = 'translateY(30px)';
            element.style.transition = 'all 0.8s ease';
            
            setTimeout(() => {
                element.style.opacity = '1';
                element.style.transform = 'translateY(0)';
            }, 100);
        }, delay);
    }
}

// Inizializza quando il DOM è pronto
document.addEventListener('DOMContentLoaded', () => {
    new HeroModule();
});

/**
 * Menu Module JavaScript
 * Logica per il modulo menu
 */

class MenuModule {
    constructor() {
        this.menuToggle = document.getElementById('menu-toggle');
        this.menuNav = document.getElementById('menu-nav');
        this.init();
    }
    
    init() {
        if (this.menuToggle && this.menuNav) {
            this.setupToggle();
            this.setupLinks();
            this.setupOutsideClick();
            this.setupScroll();
        }
    }
    
    setupToggle() {
        this.menuToggle.addEventListener('click', () => {
            this.menuNav.classList.toggle('active');
            this.menuToggle.classList.toggle('active');
        });
    }
    
    setupLinks() {
        const menuLinks = this.menuNav.querySelectorAll('.menu-link');
        menuLinks.forEach(link => {
            link.addEventListener('click', () => {
                this.menuNav.classList.remove('active');
                this.menuToggle.classList.remove('active');
            });
        });
    }
    
    setupOutsideClick() {
        document.addEventListener('click', (e) => {
            if (!this.menuToggle.contains(e.target) && !this.menuNav.contains(e.target)) {
                this.menuNav.classList.remove('active');
                this.menuToggle.classList.remove('active');
            }
        });
    }
    
    setupScroll() {
        let lastScrollY = window.scrollY;
        
        window.addEventListener('scroll', () => {
            const currentScrollY = window.scrollY;
            const menu = document.querySelector('.main-menu');
            
            if (currentScrollY > lastScrollY && currentScrollY > 100) {
                // Scrolling down
                menu.style.transform = 'translateY(-100%)';
            } else {
                // Scrolling up
                menu.style.transform = 'translateY(0)';
            }
            
            lastScrollY = currentScrollY;
        });
    }
}

// Inizializza quando il DOM è pronto
document.addEventListener('DOMContentLoaded', () => {
    new MenuModule();
});

/**
 * Results Module JavaScript
 * Filtri e ordinamento client-side per la tabella risultati
 */

document.addEventListener('DOMContentLoaded', function() {
  const categoryFilter = document.getElementById('category-filter');
  const table = document.getElementById('results-table');
  const sortableHeaders = document.querySelectorAll('.sortable');

  if (categoryFilter && table) {
    categoryFilter.addEventListener('change', function() {
      const selectedCategory = this.value;
      const rows = table.querySelectorAll('tbody tr');

      rows.forEach(row => {
        const category = row.getAttribute('data-category');
        row.style.display = (!selectedCategory || category === selectedCategory) ? '' : 'none';
      });
    });
  }

  if (sortableHeaders.length && table) {
    sortableHeaders.forEach(header => {
      header.addEventListener('click', function() {
        const column = this.getAttribute('data-sort');
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));

        const isAsc = !this.classList.contains('asc');
        sortableHeaders.forEach(h => h.classList.remove('asc', 'desc'));
        this.classList.add(isAsc ? 'asc' : 'desc');

        rows.sort((a, b) => {
          const aVal = a.querySelector(`[data-sort="${column}"]`)?.textContent || '';
          const bVal = b.querySelector(`[data-sort="${column}"]`)?.textContent || '';

          if (column === 'position' || column === 'time_result') {
            return isAsc ? aVal.localeCompare(bVal, undefined, { numeric: true })
                         : bVal.localeCompare(aVal, undefined, { numeric: true });
          }
          return isAsc ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
        });

        rows.forEach(row => tbody.appendChild(row));
      });
    });
  }
});

/**
 * Select Module JS - inizializzazione Select2
 */
document.addEventListener('DOMContentLoaded', function() {
  const selects = document.querySelectorAll('[data-module="select"] select[data-enhance="select2"]');
  if (!selects.length) return;

  // Necessita di jQuery e Select2 (caricati come vendor)
  if (typeof window.jQuery === 'undefined' || typeof window.jQuery.fn.select2 === 'undefined') {
    return;
  }

  selects.forEach(function(sel) {
    const placeholder = sel.getAttribute('data-placeholder') || 'Seleziona...';
    window.jQuery(sel).select2({
      width: 'resolve',
      placeholder: placeholder,
      allowClear: true
    });
  });
});



//# sourceMappingURL=app.min.js.map
